const streams=require("../node/iota_streams_wasm"),fetch=require("node-fetch");async function main(){let e="https://chrysalis-nodes.iota.org/",o=new streams.SendOptions(e,!0),n=C(81),t=new streams.Author(n,o.clone(),streams.ChannelType.SingleBranch);console.log("channel address: ",t.channel_address()),console.log("multi branching: ",t.is_multi_branching());let s=await t.clone().send_announce(),l=s.link;console.log("announced at: ",l.toString()),console.log("Announce message index: "+l.toMsgIndexHex());let a=await t.clone().get_client().get_link_details(l);console.log("Announce message id: "+a.get_metadata().message_id);let c=C(81),g=new streams.Subscriber(c,o.clone());await g.clone().receive_announcement(l.copy());let i=g.author_public_key();console.log("Channel registered by subscriber, author's public key: ",i);let r=g.fetch_state();console.log("Subscribing..."),s=await g.clone().send_subscribe(l.copy());let d=s.link;console.log("Subscription message at: ",d.toString()),console.log("Subscription message index: "+d.toMsgIndexHex()),await t.clone().receive_subscribe(d),console.log("Subscription processed"),console.log("Sending Keyload"),s=await t.clone().send_keyload_for_everyone(l.copy());let h=s.link;console.log("Keyload message at: ",h.toString()),console.log("Keyload message index: "+h.toMsgIndexHex()),console.log("Subscriber syncing..."),await g.clone().sync_state();let u=q("Public"),m=q("Masked");console.log("Subscriber Sending tagged packet"),s=await g.clone().send_tagged_packet(h,u,m);let _=s.link;console.log("Tag packet at: ",_.toString()),console.log("Tag packet index: "+_.toMsgIndexHex());let p=_;console.log("Subscriber Sending multiple signed packets");for(var b=0;b<10;b++)s=await g.clone().send_signed_packet(p,u,m),p=s.link,console.log("Signed packet at: ",p.toString()),console.log("Signed packet index: "+p.toMsgIndexHex());console.log("\nAuthor fetching next messages");let f=!0;for(;f;){let e=await t.clone().fetch_next_msgs();0===e.length&&(f=!1);for(var S=0;S<e.length;S++)console.log("Found a message..."),console.log("Public: ",A(e[S].message.get_public_payload()),"\tMasked: ",A(e[S].message.get_masked_payload()))}console.log("\nSubscriber resetting state"),g.clone().reset_state();let k=g.fetch_state();var x=!0;for(S=0;S<k.length;S++)r[S].link.toString()==k[S].link.toString()&&r[S].seqNo==k[S].seqNo&&r[S].branchNo==k[S].branchNo||(x=!1);x?console.log("States match"):console.log("States do not match"),console.log("\nAuthor fetching prev messages");let y=await t.clone().fetch_prev_msgs(p,3);for(var w=0;w<y.length;w++)console.log("Found a message at ",y[w].link.toString()),console.log("Found a message at index: "+y[w].link.toMsgIndexHex());let v="password",M=t.clone().export(v),H=new streams.Client(e,o.clone());function q(e){for(var o=[],n=0;n<e.length;++n)o.push(e.charCodeAt(n));return o}function A(e){for(var o="",n=0;n<e.length;++n)o+=String.fromCharCode(e[n]);return o}function C(e){const o="abcdefghijklmnopqrstuvwxyz";let n="";for(S=9;S<e;S++)n+=o[Math.floor(Math.random()*o.length)];return n}streams.Author.import(H,M,v).channel_address!==t.channel_address?console.log("import failed"):console.log("import succesfull")}global.fetch=fetch,global.Headers=fetch.Headers,global.Request=fetch.Request,global.Response=fetch.Response,streams.set_panic_hook(),main().then((()=>{console.log("Done example")})).catch((e=>{console.log(e)}));